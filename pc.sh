#!/bin/bash

# ========================
# Script C√†i Drosera Trap + Operator FULL AUTO
# Phi√™n b·∫£n: Auto Apply + Banner PIZ + S·ª≠a .env ƒë·∫ßy ƒë·ªß
# ========================

# ƒê·ªãnh nghƒ©a m√†u s·∫Øc
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Loading ƒë·∫πp
loading_bar() {
  duration=$1
  for ((i=1; i<=$duration; i++)); do
    printf "\r‚è≥ ƒêang ch·ªù %s gi√¢y..." "$i"
    sleep 1
  done
  echo -e "\n${GREEN}‚úÖ Ho√†n th√†nh ƒë·ª£i!${NC}"
}

# 1. Ki·ªÉm tra quy·ªÅn sudo
if sudo -v &>/dev/null; then
    echo -e "${GREEN}B·∫°n c√≥ quy·ªÅn sudo.${NC}"
    SUDO_CMD="sudo"
else
    echo -e "${YELLOW}B·∫°n KH√îNG c√≥ quy·ªÅn sudo.${NC}"
    SUDO_CMD=""
fi

# 2. C·∫≠p nh·∫≠t h·ªá th·ªëng
$SUDO_CMD apt-get update && $SUDO_CMD apt-get upgrade -y

# 3. C√†i c√°c g√≥i c·∫ßn thi·∫øt
$SUDO_CMD apt install curl ufw iptables build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip libleveldb-dev ca-certificates gnupg figlet -y

# 4. C√†i Docker
if [ -n "$SUDO_CMD" ]; then
    $SUDO_CMD install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $SUDO_CMD gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    $SUDO_CMD chmod a+r /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | $SUDO_CMD tee /etc/apt/sources.list.d/docker.list > /dev/null
    $SUDO_CMD apt-get update && $SUDO_CMD apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
    $SUDO_CMD docker run hello-world
fi

# 5. C√†i CLI Tools
curl -L https://app.drosera.io/install | bash
curl -L https://foundry.paradigm.xyz | bash
curl -fsSL https://bun.sh/install | bash
source ~/.bashrc

# 6. T·∫°o Trap
mkdir -p ~/my-drosera-trap
cd ~/my-drosera-trap

# 7. Git config
echo "Nh·∫≠p GitHub Email c·ªßa b·∫°n:"
read github_email
echo "Nh·∫≠p GitHub Username c·ªßa b·∫°n:"
read github_username

git config --global user.email "$github_email"
git config --global user.name "$github_username"

# 8. Init project
forge init -t drosera-network/trap-foundry-template
bun install
forge build

# 9. Nh·∫≠p PRIVATE_KEY v√† RPC_URL
echo "Nh·∫≠p PRIVATE_KEY c·ªßa b·∫°n:"
read private_key
echo "Nh·∫≠p RPC URL c·ªßa b·∫°n:"
read rpc_url

export DROSERA_PRIVATE_KEY="$private_key"
echo "export DROSERA_PRIVATE_KEY=\"$private_key\"" >> ~/.bashrc
source ~/.bashrc

# 10. Apply trap l·∫ßn 1
echo "ofc" | drosera apply --eth-rpc-url "$rpc_url"

# 11. Check drosera.toml
if [[ ! -f "drosera.toml" ]]; then
    echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y drosera.toml. Script d·ª´ng.${NC}"
    exit 1
fi

# 12. H∆∞·ªõng d·∫´n web
while true; do
    read -p "Ho√†n th√†nh g·ª≠i Boost ch∆∞a? (N ƒë·ªÉ ti·∫øp t·ª•c / Y n·∫øu ch∆∞a): " response
    [[ "$response" =~ ^[Nn]$ ]] && break
    echo "H√£y ho√†n th√†nh tr√™n web tr∆∞·ªõc khi ti·∫øp t·ª•c."
done

drosera dryrun

# 13. Update whitelist
echo "Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ EVM Operator c·ªßa b·∫°n:"
read operator_address

echo "private_trap = true" >> drosera.toml
echo "whitelist = [\"$operator_address\"]" >> drosera.toml
sed -i '/whitelist = \[\]/d' drosera.toml

# 14. Banner + Loading
clear
figlet -f big "PIZ - NODE"
echo -e "${YELLOW}‚åõ ƒê·ª£i 8 ph√∫t ƒë·ªìng b·ªô...${NC}"
loading_bar 480

# 15. Apply trap l·∫ßn 2
echo "ofc" | drosera apply --eth-rpc-url "$rpc_url"

# 16. C√†i operator
cd ~
curl -LO https://github.com/drosera-network/releases/releases/download/v1.16.2/drosera-operator-v1.16.2-x86_64-unknown-linux-gnu.tar.gz
tar -xvf drosera-operator-v1.16.2-x86_64-unknown-linux-gnu.tar.gz
$SUDO_CMD cp drosera-operator /usr/bin/

# 17. Docker Image operator
$SUDO_CMD docker pull ghcr.io/drosera-network/drosera-operator:latest

# 18. M·ªü firewall
$SUDO_CMD ufw allow ssh
$SUDO_CMD ufw allow 22
$SUDO_CMD ufw allow 31313/tcp
$SUDO_CMD ufw allow 31314/tcp
$SUDO_CMD ufw allow 30304/tcp
$SUDO_CMD ufw --force enable

# 19. Clone v√† ch·ªânh .env
git clone https://github.com/whalepiz/Drosera-Network
cd Drosera-Network
cp .env.example .env
sed -i "s/your_evm_private_key/$private_key/g" .env
sed -i "s/your_actual_private_key/$private_key/g" .env

read -p "IP Public VPS c·ªßa b·∫°n: " vps_ip
sed -i "s/your_vps_public_ip/$vps_ip/g" .env

sed -i "s|https://ethereum-holesky-rpc.publicnode.com|$rpc_url|g" docker-compose.yaml

# 20. Docker compose
$SUDO_CMD docker compose up -d
$SUDO_CMD docker compose down
$SUDO_CMD docker compose up -d

echo -e "${GREEN}‚úÖ Ho√†n t·∫•t!${NC}"

# 22. H∆∞·ªõng d·∫´n Opti In sau c√†i
echo ""
echo -e "${YELLOW}‚û°Ô∏è B∆∞·ªõc ti·∫øp theo:${NC}"
echo "1. Truy c·∫≠p v√†o Website: https://app.drosera.io/"
echo "2. K·∫øt n·ªëi v√≠ EVM c·ªßa b·∫°n"
echo "3. Nh·∫•n v√†o Traps Owned"
echo "4. Nh·∫•n v√†o Opti In"
echo ""

while true; do
    read -p "B·∫°n ƒë√£ nh·∫•n v√†o Opti In v√† th·ª±c hi·ªán l·ªánh ch∆∞a? (N ƒë·ªÉ ti·∫øp t·ª•c / Y n·∫øu ch∆∞a): " response
    [[ "$response" =~ ^[Nn]$ ]] && break
    echo "H√£y ho√†n th√†nh Opti In tr√™n web tr∆∞·ªõc khi ti·∫øp t·ª•c."
done

# 23. Ch√∫c m·ª´ng ho√†n t·∫•t
echo ""
echo -e "${GREEN}üéâ CH√öC M·ª™NG B·∫†N ƒê√É HO√ÄN T·∫§T QU√Å TR√åNH C√ÄI ƒê·∫∂T NODE!${NC}"
echo -e "${YELLOW}‚û°Ô∏è ƒê·ªÇ NODE HO·∫†T ƒê·ªòNG T·ªêT V√Ä HI·ªÜN C√ÅC THANH M√ÄU XANH S·∫º M·∫§T T·ª™ 1 TI·∫æNG ƒê·∫æN 5 TI·∫æNG.${NC}"
echo -e "${YELLOW}‚û°Ô∏è H√ÉY KI√äN NH·∫™N ƒê·ª¢I.${NC}"
echo ""
